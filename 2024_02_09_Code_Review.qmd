---
title: "2024_02_09_Code_Review"
editor: visual
format: 
  html:
    page-layout: full
    df-print: kable
---

# Experimental Design

We are researching the use of Ruxolitnib, a JAK1/2 kinase inhibitor, to suppress the immune system during bone marrow transplants (BMT) to increase donor engraftment.

In this experiment, we collected bulk RNAseq data of lymphocytes isolated from the spleens of mice who received bone marrow transplants under varying conditions.

![](Code%20Review%20Figures/BMT%20Rux%20RNAseq%20Experimental%20Model.png){fig-align="center"}

# Experiment Conditions

We used two strains of mice in this experiment:

-   C57BL/6 AKA `Black 6`

-   `Balb/c`

These mice have slightly different forms of the mouse MHC I (AKA HLA) protein, called H2Kb and H2Kd, respectively.

BMTs that use the same mouse strain as donor and recipient are considered autologous.

BMTs that use different strains for donor and recipient are considered allogenic, and these simulate conditions BMT recipients face in the hospital.

![](Code%20Review%20Figures/Mouse%20Design.png){fig-align="center" width="900"}

Using these conditions, we hope to identify genes involved in transplant engraftment (acceptance), rejection, and tolerance of allogenic bone marrow cells.

# Load Libraries

These libraries are required.

```{r}
suppressPackageStartupMessages({
library(tidyverse)
library(DESeq2)
library(pcaExplorer)
library(AnnotationDbi)
library(org.Mm.eg.db)
library(topGO)
library(purrr)
library(GeneTonic)
library(pheatmap)
library(EnhancedVolcano)
})
```

Increasing available memory.

```{r}
options(future.globals.maxSize = 14000 * 1024^2)
```

# Read in metadata

Let's read in the metadata and look at the different conditions. The NK cell samples have a n=1 and we won't use them now.

We also found some data online for naive Black 6 CD4 and CD8 T cells which I included under the name "WT Control."

```{r}
meta <- read.csv(file = "2023_11_09_results/combined_meta.csv")

meta |> 
  filter(cell_type != "NK") |> 
  dplyr::count(condition)
```

I started the analysis by comparing the conditions, keeping the comparisons intra strain and intra cell type. That means no comparing Black 6 cells to Balb/c or CD4 to CD8 and vice versa.

We wanted the differential gene expression to be due solely to the treatment conditions and not introduce possible confounders of different mouse strains and cell types.

Here are tables of the conditions separated by H2K:

```{r}
# Look at each condition and its corresponding H2K status
meta |> 
  filter(cell_type != "NK" & H2K == "b") |> 
  dplyr::select(condition, H2K, cell_type) |> 
  unique()

meta |> 
  filter(cell_type != "NK" & H2K == "d") |> 
  dplyr::select(condition, H2K, cell_type) |> 
  unique()
```

Since the rejection mice are H2Kb and the extra control data are also H2Kb, most of our comparisons were among the H2Kb cells. Below is a table of all the DESeq sets we wanted to perform.

![](Code%20Review%20Figures/Condtion%20DESeq%20table.png){fig-align="center"}

14 total DESeq runs. Tzu always tells me that if I have to do something 3 or more times, it's time for a function.

First, I set up the common variables needed to run DESeq.

# DESeq and GeneTonic object creation

## Organization: Creating Result Folders

I created two results for each comparison: DESeq results tables (.csv) GeneTonic objects (.Rdata)

The original script that did this was created 2024_01_10. Kept folder names consistent for this walkthrough.

```{r}
folder.names <- c("2024_01_10_results", "2024_01_10_results/deseq_results", "2024_01_10_results/genetonic_results")

for (i in folder.names) {
  if(!exists(i)){
    dir.create(i)
  }
}
```

## Creating counts matrix

### Create and save/load gtf_df

Import the mouse gene feature file

```{r}
gtf <-  rtracklayer::import("data/Mus_musculus.GRCm39.110.gtf")

gtf_df <- as.data.frame(gtf)

head(gtf_df)
```

Create a look-up-table matching gene id to all its transcript ids:

```{r}
tx2gene.df <- gtf_df |>
  dplyr::select(transcript_id, gene_id) |>
	distinct(transcript_id, gene_id) |>
  drop_na() -> tx2gene.df

head(tx2gene.df)
```

### Read in salmon quant.sf files using a loop

This chunk reads the first `quant.sf` and joins it with the `tx2gene.df`.

```{r}
tmp <-  read.delim(paste0("data/raw_data/salmon_output_files/",
                          meta$folder_name[1], "/quant.sf")) |>
  mutate(Name = str_sub(Name, end=-3)) |>
  inner_join(tx2gene.df, by=c("Name"="transcript_id")) |>
  group_by(gene_id) |>
  summarise(NumReads=as.integer(sum(NumReads)))
head(tmp)
```

Now we pre-define an empty count matrix to the correct dimensions. Then we will perform a loop to read the quant files and fill in the matrix one column at a time.

```{r}
sf.df <-  data.frame(matrix(0, 
                            nrow = length(tmp$gene_id),
                            ncol = length(meta$folder_name)))

colnames(sf.df) <-  meta$folder_name
rownames(sf.df) <-  tmp$gene_id

for(i in seq_along(meta$folder_name)){
  cat("Now reading...", meta$folder_name[i], "\n")
  
  sf.df[,i] <-  read.delim(paste0("data/raw_data/salmon_output_files/", meta$folder_name[i], "/quant.sf")) |>
    mutate(Name = str_sub(Name, end = -3)) |>
    inner_join(tx2gene.df, by = c("Name" = "transcript_id")) |>
    group_by(gene_id) |>
    summarise(NumReads = as.integer(sum(NumReads))) |>
    pull(NumReads)
}
```

Take a look at the sf.df

```{r}
head(sf.df)
```

```{r}
rm(gtf, tx2gene.df)
```

## DESeq analysis - single comparison walk through

In a smaller bulk RNAseq data, the counts table would be filtered for low reads as the next step.

However, this data has multiple cell types (CD4, CD8, NK) and other variables like mouse strain (H2Kb/H2Kd).

I needed to create a subset of the data that contains the appropriate samples for my comparison of interest before filtering for reads.

```{r}
meta |> 
  filter(cell_type != "NK" & H2K == "b") |> 
  dplyr::select(condition, H2K, cell_type) |> 
  unique()
```

This comparison will use the following:

-   condition 1 : `Mixed CD4 HLA B`

-   condition 2 : `Reject CD4`

I used a shorthand name when writing results files:

-   name 1 : `mix.4.b`

-   name 2 : `rej.4.b`

The code chunk below creates a vector containing the names of the sample in our comparison. It uses the vector to subset the counts matrix and then filters out any genes that have less than 10 reads in any of the subset samples.

Lastly, we subset the metadata for use in our DESeq object later.

```{r}
# Subset metadata to the conditions of interest and pull out those sample names
subset.vector <- meta |> 
  dplyr::filter(condition == "Mixed CD4 HLA B" | condition == "Reject CD4") |> 
  dplyr::pull(folder_name)

subset.vector

# Subset the sf.df
subset.sf.df <- sf.df |> 
  dplyr::select(all_of(subset.vector)) 

# Use subset.vector to filter the original sf.df object
subset.sf.df <- subset.sf.df |> 
  mutate(row.sum = apply(subset.sf.df, 1, function(x) sum(x > 10))) |> 
  # All values must be more than 10 (set to x if only x value is satisfied)
  dplyr::filter(row.sum == length(subset.vector)) |> 
  # Remove row.sum, it is not needing moving forward
  dplyr::select(-row.sum)

# Filtering metadata so only relevant samples are put into the DESeq object
subset_meta <- meta |> 
  filter(folder_name %in% subset.vector)

subset_meta
```

### Salmon matrix, QC check, and DESeqDataSet (dds) creation

```{r}
subset.salmon.matrix <- as.matrix(subset.sf.df)

subset.coldata <- data.frame(sample = subset_meta$folder_name,
                      condition = as.factor(subset_meta$condition),
                      row.names = "sample")
```

Quick row and column check

```{r}
all(rownames(subset.coldata) %in% colnames(subset.salmon.matrix))
```

```{r}
subset.se <- SummarizedExperiment(assays = list(counts = subset.salmon.matrix),
                           colData = subset.coldata)
subset.se
```

```{r}
subset.dds = DESeqDataSet(subset.se, design = ~ condition)
```

### Run DESeq

```{r}
subset.dds = DESeq(subset.dds)

# Create a results table of our comparison of interest

subset.res <- results(subset.dds,
                        contrast = c("condition", "Mixed CD4 HLA B", "Reject CD4"),
                        alpha = 0.05)
```

### DESeq results in an annotated table

Now we turn the results object into a dataframe with gene annotation, add some extra annotation (`gene_symbol`, `gene_entrez`, `gene_desc`) and use `left_join` to include the raw count data. Converting the Ensembl ID row names of `subset.sf.df` allows us to join the raw counts to the result dataframe by the shared Ensembl ID column called `gene_id` in both dataframes.

It is good practice to include the raw counts in the results to confirm the comparisons were done correctly.

```{r}
subset.ids <- subset.sf.df |> 
  rownames_to_column(var = "gene_id")

subset.anno <- deseqresult2df(subset.res) |> 
  dplyr::rename(gene_id = id) |> 
  mutate(gene_symbol = mapIds(org.Mm.eg.db, 
                              keys = gene_id, 
                              keytype = "ENSEMBL", 
                              column = "SYMBOL", 
                              multiVals = "first")) |> 
  mutate(gene_entrez = mapIds(org.Mm.eg.db, 
                              keys = gene_id, 
                              keytype = "ENSEMBL", 
                              column = "ENTREZID", 
                              multiVals = "first")) |> 
  mutate(gene_desc = mapIds(org.Mm.eg.db, 
                            keys = gene_id, 
                            keytype = "ENSEMBL", 
                            column = "GENENAME", 
                            multiVals = "first")) |> 
  relocate(gene_symbol, gene_entrez, gene_desc, .after = gene_id) |> 
  left_join(subset.ids, 
            by = c("gene_id"="gene_id")) |> 
  na.omit()

head(subset.anno)
```

Save the DESeq results separately.

```{r}
write_csv(subset.anno, file = "2024_01_10_results/DESeq_results/mix.4.b.VS.rej.4.b.csv")
```

## GeneTonic

### GeneTonic Prep

GeneTonic needs:

-   A DESeqDataSet (`subset.dds`) object, which we already created.

-   A DESEq results object (`res`), which we also already created.

-   An enriched results object (a DESeq results object filtered to significant genes, `.topgo`)

-   Background gene ids (`bg_ids`)

-   A gene annotation object (`anno`)

#### Enriched results object

```{r}
enrich.of.interest <- deseqresult2df(subset.res) |> 
  mutate(Symbol = mapIds(org.Mm.eg.db, 
                         keys = id, 
                         keytype = "ENSEMBL", 
                         column = "SYMBOL", 
                         multiVals = "first")) |> 
  dplyr::filter(padj < 0.05) |> 
  pull(Symbol)

length(enrich.of.interest)

head(enrich.of.interest)
```

#### Background gene symbols

```{r}
bg_ids <- deseqresult2df(subset.res) |> 
  mutate(Symbol = mapIds(org.Mm.eg.db, 
                         keys = id, 
                         keytype = "ENSEMBL", 
                         column = "SYMBOL", 
                         multiVals = "first")) |> 
  pull(Symbol)

length(bg_ids)
```

#### Gene annotation object

```{r}
sf.df.anno <- deseqresult2df(subset.res) |> 
  dplyr::rename(gene_id = id) |> 
  mutate(gene_name = mapIds(org.Mm.eg.db, 
                            keys = gene_id, 
                            keytype = "ENSEMBL", 
                            column = "SYMBOL", 
                            multiVals = "first")) |> 
  dplyr::select(gene_id, gene_name)

head(sf.df.anno)
```

### Perform Pathway Analysis

```{r}
subset.topgo = pcaExplorer::topGOtable(enrich.of.interest,
                                       bg_ids,
                                       ontology = "BP",
                                       mapping = "org.Mm.eg.db",
                                       geneID = "symbol")

### Reshape for Genetonic
subset.topgo <- shake_topGOtableResult(subset.topgo)
# rownames(mix.4.b.vs.rej.4.topgo) = NULL
subset.topgo <- get_aggrscores(subset.topgo, subset.res, sf.df.anno)

head(subset.topgo)
```

### Save Genetonic object

```{r}
save(subset.dds, subset.res, subset.topgo, sf.df.anno, 
     file = "2024_01_10_results/genetonic_results/mix.4.b.VS.rej.4.b.Rdata")
```

### Run GeneTonic

```{r, eval=FALSE}
GeneTonic(dds = subset.dds,
          res_de = subset.res,
          res_enrich = subset.topgo,
          annotation_obj = sf.df.anno,
          project_id = "Mixed CD4 H2Kb vs Reject CD4 H2Kb")
```

------------------------------------------------------------------------

# Subset, DESeq, GeneTonic function

Next, I wrote the function that can subset the data, perform DESeq, save the results, and build/save a GeneTonic object.

The only absolutely essential inputs for a function like this are the comparison conditions, called `con1` and `con2`.

However, the condition names lack some description and don't have a consistent structure. I defined two now variables, `name1` and `name2`, which do a better job of communicating condition, cell type, and H2K status of each condition.

The code chunk below is quite large, but it essentially just the last \~10 code chunks combined with two minor changes:

-   `con1` and `con2` take the place of `Mixed CD4 H2Kb` and `Reject CD4 H2Kb`.

-   I used `paste0()` in combination with `name1` and `name2` to name the result files.

```{r}
condition_deseq <- function(con1, con2, name1, name2) {
  
  # Create a vector that has the samples we want to compare
  subset.vector <- meta |> 
    dplyr::filter(condition == con1 | condition == con2) |> 
    pull(folder_name)
  
  # Subset the sf.df
  subset.sf.df <- sf.df |> 
    dplyr::select(all_of(subset.vector)) 
  
  # Filter out low counts
  subset.sf.df <- subset.sf.df |> 
    mutate(row.sum = apply(subset.sf.df, 1, function(x) sum(x > 10))) |> 
    # All values must be more than 10 (set to x if only x value is satisfied)
    dplyr::filter(row.sum == length(subset.vector)) |> 
    # Remove row.sum, it is not needing moving forward
    dplyr::select(-row.sum)

  # Filtering metadata so only relevant samples are put into the DESeq object
  subset_meta <- meta |> 
    filter(folder_name %in% subset.vector)
  
  # Create subset salmon matrix
  
  subset.salmon.matrix <- as.matrix(subset.sf.df)
  
  # Create a dataframe of subset samples and their condition, need to created SE object
  
  subset.coldata <- data.frame(sample = subset_meta$folder_name,
                        condition = as.factor(subset_meta$condition),
                        row.names = "sample")
  # Create SE object
  
  subset.se <- SummarizedExperiment(assays = list(counts = subset.salmon.matrix),
                             colData = subset.coldata)
  
  # Create DDS object
  
  subset.dds = DESeqDataSet(subset.se, design = ~ condition)
  
  # DESeq and results looking at our subsetted samples
  
  subset.dds = DESeq(subset.dds)
  
  subset.res <- results(subset.dds,
                          contrast = c("condition", con1, con2),
                          alpha = 0.05)
  
  # Create annotated results, join it to raw counts, and filter out NA genes
  
  subset.ids <- subset.sf.df |> 
  rownames_to_column(var = "gene_id")

  subset.anno <- deseqresult2df(subset.res) |> 
    dplyr::rename(gene_id = id) |> 
    mutate(gene_symbol = mapIds(org.Mm.eg.db, 
                                keys = gene_id, 
                                keytype = "ENSEMBL", 
                                column = "SYMBOL", 
                                multiVals = "first")) |> 
    mutate(gene_entrez = mapIds(org.Mm.eg.db, keys = gene_id, 
                                keytype = "ENSEMBL", 
                                column = "ENTREZID", 
                                multiVals = "first")) |> 
    mutate(gene_desc = mapIds(org.Mm.eg.db, 
                              keys = gene_id, 
                              keytype = "ENSEMBL", 
                              column = "GENENAME", 
                              multiVals = "first")) |> 
    relocate(gene_symbol, gene_entrez, gene_desc, .after = gene_id) |> 
    left_join(subset.ids, 
              by = c("gene_id"="gene_id")) |> 
    na.omit()
  
  # write csv file
  
  write_csv(subset.anno, file = paste0("2024_01_10_results/DESeq_results/", name1, ".VS.", name2, ".csv"))
  
  # GeneTonic Prep
  
  ## Enriched results object
  
  deseqresult2df(subset.res) |> 
    # rownames_to_column(var = "Ensembl") |> 
    mutate(Symbol = mapIds(org.Mm.eg.db, 
                           keys = id, 
                           keytype = "ENSEMBL", 
                           column = "SYMBOL", 
                           multiVals = "first")) |> 
    dplyr::filter(padj < 0.05) |> 
    pull(Symbol) -> enrich.of.interest
  
  ## Background gene symbols
  
  bg_ids <- deseqresult2df(subset.res) |> 
    mutate(Symbol = mapIds(org.Mm.eg.db, 
                           keys = id, 
                           keytype = "ENSEMBL", 
                           column = "SYMBOL", 
                           multiVals = "first")) |> 
    pull(Symbol)
  
  ### Gene annotation object
  
  sf.df.anno <- deseqresult2df(subset.res) |> 
    dplyr::rename(gene_id = id) |> 
    mutate(gene_name = mapIds(org.Mm.eg.db, 
                              keys = gene_id, 
                              keytype = "ENSEMBL", 
                              column = "SYMBOL", 
                              multiVals = "first")) |> 
    dplyr::select(gene_id, gene_name)
  
  ## Perform Pathway Analysis
  
  subset.topgo = pcaExplorer::topGOtable(enrich.of.interest,
                                         bg_ids,
                                         ontology = "BP",
                                         mapping = "org.Mm.eg.db",
                                         geneID = "symbol")
  
  ## Reshape for Genetonic
  
  subset.topgo <- shake_topGOtableResult(subset.topgo)
  subset.topgo <- get_aggrscores(subset.topgo, subset.res, sf.df.anno)
  
  # save info for GeneTonic
  
  save(subset.dds, subset.res, subset.topgo, sf.df.anno, file = paste0("2024_01_10_results/genetonic_results/", name1, ".VS.", name2, ".Rdata"))
}
```

## Test run of the function using Mixed CD4 H2Kb cells vs the other 3 H2Kb conditions:

Some words here about using pmap vs lapply, mapply, etc...

```{r}
con1 = c("Mixed CD4 HLA B", "Mixed CD4 HLA B", "Mixed CD4 HLA B")
con2 = c("Reject CD4", "Autol C57 CD4", "WT control CD4")
name1 = c("mix.4.b", "mix.4.b", "mix.4.b")
name2 = c("rej.4.b", "auto.4.b", "wt.con.4.b")

mix.cd4.b.vs.other.b.list <- c(list(con1), list(con2), list(name1), list(name2))
```

```{r, eval = FALSE}
pmap(mix.cd4.b.vs.other.b.list, condition_deseq)
```

This took some time to make, but likely saved me time in this comparison. Not to mention future data.

The initial comparisons used `condition` as the main variable. But with a small amount of changes to the metadata and the function, it could run on any column in the metadata.

For example, if I want to combine the mouse strain data (CD4 T cells from both mixed groups, or both auto groups), I could:

-   Create a new column in the metadata called `group` using `mutate()` and `case_when()` to define my `group` column.

-   Change each `condition` in the function to `group`

-   Make a new input list of `con1`, `con2`, `name1`, and `name2`

-   Run!

# ------------------------------------------------------------------------

Next!

# Generating heatmaps, volcano plots, and GeneTonic plots

## Single comparison walk through

Now that we have our DESeq data and GeneTonic object data, I made some plots for each comparison. Four plots for each: - Heatmap of top 25 DE genes by adjusted p value - Heatmap of top 25 DE genes by absolute log2FC - Volcano plot - GeneTonic Pathway Analysis plot (The call it "Summary Overview")

I could have created a folder for heatmaps, one for volcano plots, etc...

But that is hard to navigate, with 14 plots side by side. I thought it would be better for each comparison to have its own folder that contains the relevant plots.

We will need to read in the data for the plots. We technically have it saved in our variables for this notebook, but doing it this way helps us fix any issues when applying the process to the rest of the comparisons.

```{r}
load(file = paste0("2024_01_10_results/genetonic_results/mix.4.b.VS.rej.4.b.Rdata"))

deseq.df <- read.csv(file = paste0("2024_01_10_results/deseq_results/mix.4.b.VS.rej.4.b.csv"))
```

New results folder, which will contain the subfolders for each comparison.

```{r}
folder.name <- "2024_01_19_results"

if(!exists(folder.name)){
    dir.create(folder.name)
  }
```

### Heatmap generation

The sample names in the counts matrix are typically displayed under each column of the heatmap. But I found they made the plot harder to interpret, so I made an annotation dataframe to make them more readable.

Another sticking point: My DESeq results have the subset counts for my heatmaps, but there is no consistent naming structure. Our samples all have `L002`, but the public data do not. Some comparisons have 6 samples, others only 5.

I found the best way to isolate the counts was to remove the common rows they all share: the DESeq results at the front of the dataframe, with `dplyr::select(deseq.df, -1:-10)`

```{r}
# This removes all the columns that are not raw counts from the DESeq results
sample.df <- dplyr::select(deseq.df, -1:-10)

# Filter metadata for one of the condition comparisons
subset1 <- meta |> 
  filter(condition == "Mixed CD4 HLA B") |> 
  pull(folder_name)
# change - to . to match column name format
subset1 <- subset1 |> 
  str_replace_all("-", ".")
# R adds X to all column names that start with a number, so we need to add X as well
subset1 <- paste0("X", subset1)
# Create the annotation dataframe where the column name is matched with its condition
anno <- data.frame(sample_name = colnames(sample.df)) |> 
  mutate(condition = ifelse(sample_name %in% subset1, "Mixed CD4 HLA B", "Reject CD4")) |> 
  column_to_rownames("sample_name")

# defining colors for the annotation
condition <- c("orange", "blue")
names(condition) <- c("Mixed CD4 HLA B", "Reject CD4")
anno_colors <- list(condition = condition)
```

```{r}
anno
anno_colors
```

### Create and save heatmaps

Heatmap for the top 25 padj

```{r}
deseq.df |> 
  dplyr::slice(1:25) |> 
  column_to_rownames(var = "gene_symbol") |> 
  dplyr::select(-1:-9) |> 
  pheatmap(scale = "row",
         fontsize = 12,
         fontsize_row = 11,
         show_colnames = FALSE,
         treeheight_col = 0,
         annotation = anno,
         annotation_colors = anno_colors,
         main = "Top 25 genes by p-value") |> 
         ggsave(filename = "2024_01_19_results/mix.4.b.VS.rej.4.b/mix.4.b.VS.rej.4.b.padj.png")
```

```{r}
deseq.df |> 
  filter(padj <= 0.05) |> 
  arrange(desc(abs(c(log2FoldChange)))) |> 
  dplyr::slice(1:25) |> 
  column_to_rownames(var = "gene_symbol") |> 
  dplyr::select(-1:-9) |>
  pheatmap(scale = "row",
         fontsize = 12,
         fontsize_row = 11,
         show_colnames = FALSE,
         treeheight_col = 0,
         annotation = anno,
         annotation_colors = anno_colors,
         main = "Top 25 genes by absolute log2FC") |> 
         ggsave(filename = "2024_01_19_results/mix.4.b.VS.rej.4.b/mix.4.b.VS.rej.4.b.log2FC.png")
```

## Volcano plot of DE genes

```{r}
volc.plot <- EnhancedVolcano(toptable = deseq.df,
                lab = deseq.df$gene_symbol,
                x = "log2FoldChange",
                y = "padj",
                # xlim = c(-3, 3),
                # ylim = c(-0.5, 8),
                title = "Mixed CD4 HLA B vs Reject CD4",
                subtitle = "DESeq2 Results",
                # FCcutoff = ,
                pCutoff = 0.05,
                # #labFace = "bold",
                legendPosition = "none",
                caption = "") 

volc.plot |> 
  ggsave(filename = "2024_01_19_results/mix.4.b.VS.rej.4.b/mix.4.b.VS.rej.4.b.volcano.png")

volc.plot

```

## GeneTonic Pathway summary plot

```{r}
p <- gs_summary_overview(res_enrich = subset.topgo,
                    n_gs = 15) +
  labs(title = "Pathway Enrichment",
       subtitle = "Mixed CD4 HLA B vs Reject CD4")

ggsave(filename = "2024_01_19_results/mix.4.b.VS.rej.4.b/mix.4.b.VS.rej.4.b.summary.png",
       plot = p,
       width = 11,
       height = 8,
       units = "in",
       bg = "white")
p
```

# Plot function

Now that we've generated each of our plots, we can create the function that does it all for us. And we have set it up similar to the DESeq function. All we need to provide is the conditions for comparison as con1 and con2 and the name abbreviations as name1 and name2 again.

```{r}
plot_results <- function(con1, con2, name1, name2){
  
  load(file = paste0("2024_01_10_results/genetonic_results/", name1, ".VS.", name2, ".Rdata"))
  deseq.df <- read.csv(file = paste0("2024_01_10_results/deseq_results/", name1, ".VS.", name2, ".csv")) 
  
  results.folder <- paste0(folder.name, "/", name1, ".VS.", name2, "/")
  
  if(!exists(results.folder)){
    dir.create(results.folder)}
  
  # filter the deseq.df so we can pull out the colnames for the annotation df
  sample.df <- dplyr::select(deseq.df, -1:-10)
  
  # Filter metadata for one of the condition comparisons
  subset1 <- meta |> 
    filter(condition == con1) |> 
    pull(folder_name)
  # change - to . to match column name format
  subset1 <- subset1 |> 
    str_replace_all("-", ".")
  # R adds X to all column names that start with a number, so we need to add X as well
  subset1 <- paste0("X", subset1)
  # Create the annotation dataframe where the column name is matched with its condition
  anno <- data.frame(sample_name = colnames(sample.df)) |> 
    mutate(condition = ifelse(sample_name %in% subset1, con1, con2)) |> 
    column_to_rownames("sample_name")
  
  # defining colors for the annotation
  condition <- c("orange", "blue")
  names(condition) <- c(con1, con2)
  anno_colors <- list(condition = condition)
  
  # Top 25 DE by padj heatmap
  deseq.df |> 
    dplyr::slice(1:25) |> 
    column_to_rownames(var = "gene_symbol") |> 
    dplyr::select(-1:-9) |> 
    pheatmap(scale = "row",
           fontsize = 12,
           fontsize_row = 11,
           show_colnames = FALSE,
           treeheight_col = 0,
           annotation = anno,
           annotation_colors = anno_colors,
           main = "Top 25 genes by p-value") |> 
           ggsave(filename = paste0(results.folder, name1, ".VS.", name2, ".padj.png"))
  
  #p value heatmap
  deseq.df |> 
    filter(padj <= 0.05) |> 
    arrange(desc(abs(c(log2FoldChange)))) |> 
    dplyr::slice(1:25) |> 
    column_to_rownames(var = "gene_symbol") |> 
    dplyr::select(-1:-9) |> 
    pheatmap(scale = "row",
           fontsize = 12,
           fontsize_row = 11,
           show_colnames = FALSE,
           treeheight_col = 0,
           annotation = anno,
           annotation_colors = anno_colors,
           main = "Top 25 genes by absolute log2FC") |> 
           ggsave(filename = paste0(results.folder, name1, ".VS.", name2, ".log2FC.png"))
  
  #log2FC heatmap
  EnhancedVolcano(toptable = deseq.df,
                  lab = deseq.df$gene_symbol,
                  x = "log2FoldChange",
                  y = "padj",
                  # xlim = c(-3, 3),
                  # ylim = c(-0.5, 8),
                  title = paste(con1, "vs", con2, sep = " "),
                  subtitle = "DESeq2 Results",
                  # FCcutoff = ,
                  pCutoff = 0.05,
                  # #labFace = "bold",
                  legendPosition = "none",
                  caption = "") |> 
    ggsave(filename = paste0(results.folder, name1, ".VS.", name2, ".volcano.png"))
  
  #Pathway summary plot
  p <- gs_summary_overview(res_enrich = subset.topgo, n_gs = 15) +
    labs(title = "Pathway Enrichment",
         subtitle = paste(con1, "vs", con2, sep = " "))
  
  ggsave(filename = paste0(results.folder, name1, ".VS.", name2, ".pathways.png"),
         plot = p,
         width = 11,
         height = 8,
         units = "in",
         bg = "white")
}
```

## List for function

Now we can create our list for the function input.

```{r}
con1 = c("Mixed CD4 HLA B", "Mixed CD4 HLA B", "Mixed CD4 HLA B", "Mixed CD8-HLA B", "Mixed CD8-HLA B", "Mixed CD8-HLA B", "Autol C57 CD4", "Autol C57 CD4", "Autol C57-CD8", "Autol C57-CD8", "Mixed CD4 HLA B", "Mixed CD8-HLA D")

con2 = c("Reject CD4", "Autol C57 CD4", "WT control CD4", "Reject CD8", "Autol C57-CD8", "WT control CD8", "Reject CD4", "WT control CD4", "Reject CD8", "WT control CD8", "Reject CD4", "Autol Balb-CD8")

name1 = c("mix.4.b", "mix.4.b", "mix.4.b", "mix.8.b", "mix.8.b", "mix.8.b", "auto.4.b", "auto.4.b", "auto.8.b", "auto.8.b", "mix.4.d", "mix.8.d")

name2 = c("rej.4.b", "auto.4.b", "wt.con.4.b", "rej.8.b", "auto.8.b", "wt.con.8.b", "rej.4.b", "wt.con.4.b", "rej.8.b", "wt.con.8.b", "auto.4.d", "auto.8.d")

function.list <- c(list(con1), list(con2), list(name1), list(name2))
```

## Run the function

```{r}
pmap(function.list, plot_results)
```
