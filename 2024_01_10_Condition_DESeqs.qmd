---
title: "2024_01_10_Condition_DESeqs"
format: html
editor: source
---

This markdown will create a function to perform DESeq analysis of the BMT Rux bulk dataset. All DESeq comparisons done here will be based on the `condition` variable in the metadata. All comparisons will be done intra strain: B6 vs B6 cells, and Balb vs Balb cells.

# Load Libraries

These libraries are required to perform this RNAseq analysis.

```{r}
suppressPackageStartupMessages({
library(tidyverse)
library(DESeq2)
library(GeneTonic)
library(pcaExplorer)
library(AnnotationDbi)
library(org.Mm.eg.db)
library(topGO)
library(purrr)
})
```


```{r}
folder.name <- "2024_01_10_results"

if(!exists(folder.name)){
  dir.create(folder.name)
}
```

# Read in metadata and data

```{r}
combined_meta <- read.csv(file = "2023_11_09_results/combined_meta.csv")

load(file = "2023_11_09_results/sf.df.Rdata")
```

# DESeq of subsets by condition; Function creation

```{r}
condition_deseq <- function(con1, con2, name1, name2) {
  
  # Create a vector that has the samples we want to compare
  subset.vector <- combined_meta |> 
    dplyr::filter(condition == con1 | condition == con2) |> 
    pull(folder_name)
  
  # The next two code bits create sf.df.data.df, a dataframe of the subset samples and filters for low/no counts
  
  sf.df.data.df <-  sf.df |>
    dplyr::select(all_of(subset.vector))
  
  sf.df.data.df <- sf.df.data.df |> 
    mutate(row.sum = apply(sf.df.data.df, 1, function(x) sum(x > 10))) |> 
    # All values must be more than 10 (set to x if only x value is satisfied)
    dplyr::filter(row.sum == length(subset.vector)) |> 
    # No longer need the column "row.sum", we can remove it
    dplyr::select(-row.sum) |> 
    rownames_to_column(var = "gene_id")
  
  # Subset the sf.df
  
  subset.sf.df <- sf.df |> 
    dplyr::select(all_of(subset.vector))
  
  # Filtering metadata down to subset
  
  subset_meta <- combined_meta |> 
    filter(folder_name %in% subset.vector)
  
  # Create subset salmon matrix
  
  subset.salmon.matrix <- as.matrix(subset.sf.df)
  
  # Create a dataframe of subset samples and their condition, need to created SE object
  
  subset.coldata <- data.frame(sample = subset_meta$folder_name,
                        condition = as.factor(subset_meta$condition),
                        row.names = "sample")
  # Create SE object
  
  subset.se <- SummarizedExperiment(assays = list(counts = subset.salmon.matrix),
                             colData = subset.coldata)
  
  # Create DDS object
  
  subset.dds = DESeqDataSet(subset.se, design = ~ condition)
  
  # DESeq and results looking at our subsetted samples
  
  subset.dds = DESeq(subset.dds)
  
  subset.res <- results(subset.dds,
                          contrast = c("condition", con1, con2),
                          alpha = 0.05)
  
  # Create annotated result dataframe and filter out NA genes
  
  subset.anno <- deseqresult2df(subset.res) |> 
    dplyr::rename(gene_id = id) |> 
    mutate(gene_symbol = mapIds(org.Mm.eg.db, 
                                keys = gene_id, 
                                keytype = "ENSEMBL", 
                                column = "SYMBOL", 
                                multiVals = "first")) |> 
    mutate(gene_entrez = mapIds(org.Mm.eg.db, keys = gene_id, 
                                keytype = "ENSEMBL", 
                                column = "ENTREZID", 
                                multiVals = "first")) |> 
    mutate(gene_desc = mapIds(org.Mm.eg.db, 
                              keys = gene_id, 
                              keytype = "ENSEMBL", 
                              column = "GENENAME", 
                              multiVals = "first")) |> 
    relocate(gene_symbol, gene_entrez, gene_desc, .after = gene_id) |> 
    left_join(sf.df.data.df, 
              by = c("gene_id"="gene_id")) |> 
    na.omit()
  
  # write csv file
  
  write_csv(subset.anno, file = paste0(folder.name, "/DESeq_results/", name1, ".VS.", name2, ".csv"))
  
  # GeneTonic Prep
  
  ## Enriched results object
  
  deseqresult2df(subset.res) |> 
    # rownames_to_column(var = "Ensembl") |> 
    mutate(Symbol = mapIds(org.Mm.eg.db, 
                           keys = id, keytype = "ENSEMBL", 
                           column = "SYMBOL", 
                           multiVals = "first")) |> 
    dplyr::filter(padj < 0.05) |> 
    pull(Symbol) -> enrich.of.interest
  length(enrich.of.interest)
  head(enrich.of.interest)
  
  ## Background gene symbols
  
  bg_ids <- deseqresult2df(subset.res) |> 
    mutate(Symbol = mapIds(org.Mm.eg.db, keys = id, 
                           keytype = "ENSEMBL", 
                           column = "SYMBOL", 
                           multiVals = "first")) |> 
    pull(Symbol)
  
  ### Gene annotation object
  
  sf.df.anno <- deseqresult2df(subset.res) |> 
    dplyr::rename(gene_id = id) |> 
    mutate(gene_name = mapIds(org.Mm.eg.db, 
                              keys = gene_id, 
                              keytype = "ENSEMBL", 
                              column = "SYMBOL", 
                              multiVals = "first")) |> 
    dplyr::select(gene_id, gene_name)
  
  ## Perform Pathway Analysis
  
  subset.topgo = pcaExplorer::topGOtable(enrich.of.interest,
                                                bg_ids,
                                                ontology = "BP",
                                                mapping = "org.Mm.eg.db",
                                                geneID = "symbol")
  
  ## Reshape for Genetonic
  
  subset.topgo <- shake_topGOtableResult(subset.topgo)
  subset.topgo <- get_aggrscores(subset.topgo, subset.res, sf.df.anno)
  
  # save info for GeneTonic
  
  save(subset.dds, subset.res, subset.topgo, sf.df.anno, file = paste0(folder.name, "/genetonic_results/", name1, ".VS.", name2, ".Rdata"))
}
```

# Run function on B6 cells

## Mixed CD4 HLA B

In order to test the function, I will run the comparisons in small chunks, starting with Mixed CD4 HLA B.

```{r}
con1 = c("Mixed CD4 HLA B", "Mixed CD4 HLA B", "Mixed CD4 HLA B")
con2 = c("Reject CD4", "Autol C57 CD4", "WT control CD4")
name1 = c("mix.4.b", "mix.4.b", "mix.4.b")
name2 = c("rej.4.b", "auto.4.b", "wt.con.4.b")

mix.cd4.b.vs.groups.b.list <- c(list(con1), list(con2), list(name1), list(name2))
```

```{r}
pmap(mix.cd4.b.vs.groups.b.list, condition_deseq)
```

## Mixed CD8 HLA B

```{r}
con1 = c("Mixed CD8-HLA B", "Mixed CD8-HLA B", "Mixed CD8-HLA B")
con2 = c("Reject CD8", "Autol C57-CD8", "WT control CD8")
name1 = c("mix.8.b", "mix.8.b", "mix.8.b")
name2 = c("rej.8.b", "auto.8.b", "wt.con.8.b")

mix.cd8.b.vs.groups.b.list <- c(list(con1), list(con2), list(name1), list(name2))
```

```{r}
pmap(mix.cd8.b.vs.groups.b.list, condition_deseq)
```

## Autologous C57 CD4

```{r}
con1 = c("Autol C57 CD4", "Autol C57 CD4")
con2 = c("Reject CD4", "WT control CD4")
name1 = c("auto.4.b", "auto.4.b")
name2 = c("rej.4.b", "wt.con.4.b")

auto.4.b.vs.groups.list <- c(list(con1), list(con2), list(name1), list(name2))
```

```{r}
pmap(auto.4.b.vs.groups.list, condition_deseq)
```

## Autologous C57 CD8

```{r}
con1 = c("Autol C57-CD8", "Autol C57-CD8")
con2 = c("Reject CD8", "WT control CD8")
name1 = c("auto.8.b", "auto.8.b")
name2 = c("rej.8.b", "wt.con.8.b")

auto.8.b.vs.groups.list <- c(list(con1), list(con2), list(name1), list(name2))
```

```{r}
pmap(auto.8.b.vs.groups.list, condition_deseq)
```

## Balb cells

```{r}
con1 = c("Mixed CD4-HLA D", "Mixed CD8-HLA D")
con2 = c("Autol Balb-CD4", "Autol Balb-CD8")
name1 = c("mix.4.d", "mix.8.d")
name2 = c("auto.4.d", "auto.8.d")

mix.d.vs.auto.d.list <- c(list(con1), list(con2), list(name1), list(name2))
```

```{r}
pmap(mix.d.vs.auto.d.list, condition_deseq)
```


# SessionInfo()

```{r}
sessionInfo()
```


