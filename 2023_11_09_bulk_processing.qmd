---
title: "2023_11_09_bulk_processing"
format: html
editor: source
---

# Load Libraries

These libraries are required to perform this RNAseq analysis.

```{r}
suppressPackageStartupMessages({
library(EnsDb.Mmusculus.v79)
library(tidyverse)
library(tidybulk)
library(janitor)
library(plotly)
library(ggrepel)
library(DESeq2)
library(GeneTonic)
library(pcaExplorer)
library(AnnotationDbi)
library(org.Mm.eg.db)
library(topGO)
})
```

Creating a folder to store results from this script.

```{r}
folder.name <- "2023_11_09_results"

if(!exists(folder.name)){
  dir.create(folder.name)
}
```

# Data Dictionary - Metadata

Read in metadata and create a new column that matches with file folders. Folder_name will help us read in the sample quant.sf files.

```{r}
assay.meta <- read.csv(file = "data/metadata/PLX037286_sample_data_eric_ARRANGED.csv") |>
  mutate(folder_name = str_remove(folder_name, pattern = "_R1_001.fastq.gz"))
public.meta <- read_tsv(file = "data/metadata/filereport_read_run_PRJNA448448_tsv_ARRANGED.txt") |> 
  as.data.frame()

combined_meta <- rbind(assay.meta, public.meta)
```

# Transcript-Gene-Pair: `tx2gene.df`

Our goal is to sum up all counts of a gene (represented by gene ID) from all its transcripts (represented by transcript ID). First, we will import the mouse gene feature file (GTF) which will help us match the gene id and transcript id.

```{r}
gtf <-  rtracklayer::import("data/Mus_musculus.GRCm39.110.gtf")

gtf_df <- as.data.frame(gtf)

gtf_df
```

### Save/Load `gtf_df`

Saving this to the `data` folder since it is a more general reference file.

```{r}
# save(gtf_df, file = "data/mouse39_gtf_df.Rdata")
load(file = "data/mouse39_gtf_df.Rdata")
```

## Look up table

Create a look-up-table matching gene id to all its transcript ids:

```{r}
tx2gene.df <- gtf_df |>
  dplyr::select(transcript_id, gene_id) |>
	distinct(transcript_id, gene_id) |>
  drop_na() -> tx2gene.df

tx2gene.df
```

# Salmon loop

Pre-define count table matrix by importing one of Salmon result to determine the number of genes for the table matrix.

```{r}
tmp <-  read.delim(paste0("data/raw_data/salmon_output_files/",
                          combined_meta$folder_name[1], "/quant.sf")) |>
  mutate(Name = str_sub(Name, end=-3)) |>
  inner_join(tx2gene.df, by=c("Name"="transcript_id")) |>
  group_by(gene_id) |>
  summarise(NumReads=as.integer(sum(NumReads)))
```

Now we can pre-define an empty data matrix to the correct dimensions. Then we will perform a loop to read the quant files and fill in the data matrix on column at a time.

```{r}
sf.df <-  data.frame(matrix(0, 
                            nrow = length(tmp$gene_id),
                            ncol = length(combined_meta$folder_name)))

colnames(sf.df) <-  combined_meta$folder_name
rownames(sf.df) <-  tmp$gene_id

for(i in seq_along(combined_meta$folder_name)){
  cat("Now reading...", combined_meta$folder_name[i], "\n")
  
  sf.df[,i] <-  read.delim(paste0("data/raw_data/salmon_output_files/", combined_meta$folder_name[i], "/quant.sf")) |>
    mutate(Name = str_sub(Name, end=-3)) |>
    inner_join(tx2gene.df, by=c("Name"="transcript_id")) |>
    group_by(gene_id) |>
    summarise(NumReads=as.integer(sum(NumReads))) |>
    pull(NumReads)
}
```

```{r}
sf.df
```

## Save/Load sf.df dataset

Save a copy of the Salmon dataset so I don't have to start from scratch in future analyses.

```{r}
# save(sf.df, file = "2023_11_09_results/sf.df.Rdata")
load(file = "2023_11_09_results/sf.df.Rdata")
```

## Create salmon data matrix

```{r}
salmon.matrix <- as.matrix(sf.df)
```

```{r}
coldata <- data.frame(sample = combined_meta$folder_name,
                      condition = as.factor(combined_meta$condition),
                      row.names = "sample")
coldata
```

## Balance Check

```{r}
all(rownames(coldata) %in% colnames(salmon.matrix))
```

# Total SummarizedExperiment (.se) Object

```{r}
total.se <- SummarizedExperiment(assays = list(counts = salmon.matrix),
                           colData = coldata)

total.se
```

## Save/Load total.se object

```{r}
# save(total.se, file = "2023_11_09_results/total.se.Rdata")
load(file = "2023_11_09_results/total.se.Rdata")
```

## QC check and Scale data

```{r}
data.frame(colData(total.se))
```

```{r}
total.scaled.se <- total.se |> 
  keep_abundant(factor_of_interest = condition) |> 
  scale_abundance()
```

```{r}
colData(total.scaled.se)
```

## PCA

```{r}
total.pca.se <- total.se |> 
  tidybulk::keep_abundant() |>
  tidybulk::scale_abundance() |>
  tidybulk::reduce_dimensions(method = "PCA", .dims = 3)
```

```{r}
data.frame(colData(total.pca.se))
```

```{r}
options(ggrepel.max.overlaps = Inf)

total.pca.se |> 
  tidybulk::pivot_sample() |> 
  ggplot(aes(x = PC1, y = PC2, colour = condition)) +
  geom_point() +
  geom_text_repel(aes(label = condition), show.legend = FALSE, size = 3)
```

# DESeq

IN the original run, Tzu created a master DESeq loop that ran and output all the comparisons at once. This was too complicated for me to simply copy and paste. I will run a single iteration first. If the results look good, I will create some functions to perform each step individually but perform all comparisons in one code chunk.

## Subsetting

Quick look at our condition column to help copy/paste for our results function

```{r}
combined_meta |> 
  dplyr::count(condition)
```

The comparison I want to do is the Mixed CD4 HLA B vs the Reject CD4. I will subset the metadata to just this samples, and use the resulting `folder_name` column to subset the `sf.df` object. 

Assuming our subset contains similar cells (T cells, e.g.) we can filter the counts now to remove any low/no expression genes. It will harder to filter them out later, not to mention it will take more compute when working with all genes.

Also, if I don't subset the `sf.df`, it will show all samples in the downstream GeneTonic plots.

```{r}
subset.vector <- combined_meta |> 
  dplyr::filter(condition == "Mixed CD4 HLA B" | condition == "Reject CD4") |> 
  pull(folder_name)

# Subsetting the sf.df first, because I couldn't get the mutate() to work if this code is all in one chunk

sf.df.data.df <-  sf.df |>
  dplyr::select(all_of(subset.vector))

# Count filtering

sf.df.data.df <- sf.df.data.df |> 
  mutate(row.sum = apply(sf.df.data.df, 1, function(x) sum(x > 10))) |> 
  # All values must be more than 10 (set to x if only x value is satisfied)
  dplyr::filter(row.sum == length(subset.vector)) |> 
  # No longer need the column "row.sum", we can remove it
  dplyr::select(-row.sum) |> 
  rownames_to_column(var = "gene_id")

# Subset the sf.df

subset.sf.df <- sf.df |> 
  dplyr::select(all_of(subset.vector))

# Filtering metadata so only relevant samples are put into the DESeq object
subset_meta <- combined_meta |> 
  filter(folder_name %in% subset.vector)

```

## Salmon matrix, QC check, and DESeqDataSet (dds) creation

```{r}
subset.salmon.matrix <- as.matrix(subset.sf.df)

# subset.salmon.matrix <- as.matrix(sf.df)

subset.coldata <- data.frame(sample = subset_meta$folder_name,
                      condition = as.factor(subset_meta$condition),
                      row.names = "sample")

# subset.coldata <- data.frame(sample = combined_meta$folder_name,
#                       condition = as.factor(combined_meta$condition),
#                       row.names = "sample"
```

Quick row and column check

```{r}
all(rownames(subset.coldata) %in% colnames(subset.salmon.matrix))
```

```{r}
subset.se <- SummarizedExperiment(assays = list(counts = subset.salmon.matrix),
                           colData = subset.coldata)

# subset.se <- SummarizedExperiment(assays = list(counts = subset.salmon.matrix),
#                             colData = combined_meta)


subset.se
```

```{r}
subset.dds = DESeqDataSet(subset.se, design = ~ condition)
```

## Run DESeq

```{r}
subset.dds = DESeq(subset.dds)

subset.res <- results(subset.dds,
                        contrast = c("condition", "Mixed CD4 HLA B", "Reject CD4"),
                        alpha = 0.05)
```

## Annotation table

It is good practice to include the raw counts in our DESeq results so we can confirm the comparisons were done correctly.

Now we turn the results object into a dataframe with gene annotation, and join the the raw counts for the samples in this comparison from `sf.df.data.df`.


```{r}
subset.anno <- deseqresult2df(subset.res) |> 
  dplyr::rename(gene_id = id) |> 
  mutate(gene_symbol = mapIds(org.Mm.eg.db, 
                              keys = gene_id, 
                              keytype = "ENSEMBL", 
                              column = "SYMBOL", 
                              multiVals = "first")) |> 
  mutate(gene_entrez = mapIds(org.Mm.eg.db, keys = gene_id, 
                              keytype = "ENSEMBL", 
                              column = "ENTREZID", 
                              multiVals = "first")) |> 
  mutate(gene_desc = mapIds(org.Mm.eg.db, 
                            keys = gene_id, 
                            keytype = "ENSEMBL", 
                            column = "GENENAME", 
                            multiVals = "first")) |> 
  relocate(gene_symbol, gene_entrez, gene_desc, .after = gene_id) |> 
  left_join(sf.df.data.df, 
            by = c("gene_id"="gene_id")) |> 
  na.omit()

```

We want to save the DESeq results separately.

```{r}
write_csv(subset.anno, file = paste0(folder.name, "/DESeq_results/mix.4.b.VS.rej.4.b.csv"))
```

# GeneTonic

## GeneTonic Prep

GeneTonic needs:
  A DESeqDataSet (subset.dds) object, which we already created.
  A DESEq results object (res), which we also already created.
  An enriched results object (a results object filtered to significant genes, e.g.)
  Background gene ids (bg_ids)
  A gene annotation object 

### Enriched results object

```{r}
deseqresult2df(subset.res) |> 
  # rownames_to_column(var = "Ensembl") |> 
  mutate(Symbol = mapIds(org.Mm.eg.db, 
                         keys = id, keytype = "ENSEMBL", 
                         column = "SYMBOL", 
                         multiVals = "first")) |> 
  dplyr::filter(padj < 0.05) |> 
  pull(Symbol) -> enrich.of.interest
length(enrich.of.interest)
head(enrich.of.interest)
```

### Background gene symbols

```{r}
bg_ids <- deseqresult2df(subset.res) |> 
  mutate(Symbol = mapIds(org.Mm.eg.db, keys = id, 
                         keytype = "ENSEMBL", 
                         column = "SYMBOL", 
                         multiVals = "first")) |> 
  pull(Symbol)

length(bg_ids)
```

### Gene annotation object

```{r}
sf.df.anno <- deseqresult2df(subset.res) |> 
  dplyr::rename(gene_id = id) |> 
  mutate(gene_name = mapIds(org.Mm.eg.db, 
                            keys = gene_id, 
                            keytype = "ENSEMBL", 
                            column = "SYMBOL", 
                            multiVals = "first")) |> 
  dplyr::select(gene_id, gene_name)

sf.df.anno
```

## Perform Pathway Analysis

```{r}
subset.topgo = pcaExplorer::topGOtable(enrich.of.interest,
                                              bg_ids,
                                              ontology = "BP",
                                              mapping = "org.Mm.eg.db",
                                              geneID = "symbol")

### Reshape for Genetonic
subset.topgo <- shake_topGOtableResult(subset.topgo)
# rownames(mix.4.b.vs.rej.4.topgo) = NULL
subset.topgo <- get_aggrscores(subset.topgo, subset.res, sf.df.anno)
```

## Run GeneTonic

```{r, eval=FALSE}
GeneTonic(dds = subset.dds,
          res_de = subset.res,
          res_enrich = subset.topgo,
          annotation_obj = sf.df.anno,
          project_id = "TEST1")
```




