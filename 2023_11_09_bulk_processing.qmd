---
title: "2023_11_09_bulk_processing"
#format: html
editor: source
---

# Load Libraries

These libraries are required to perform this RNAseq analysis.

```{r}
suppressPackageStartupMessages({
library(tidyverse)
library(tidybulk)
library(janitor)
library(plotly)
library(ggrepel)
library(DESeq2)
library(GeneTonic)
library(pcaExplorer)
library(AnnotationDbi)
library(org.Hs.eg.db)
library(topGO)
})
```

# Data Dictionary - Metadata

Read in metadata and create a new column that matches with file folders. Folder_name will help us read in the sample quant.sf files.

```{r}
meta <- read.csv(file = "data/metadata/PLX037286_sample_data_eric_ARRANGED.csv") |>
  mutate(folder_name = str_remove(r1_fastq, pattern = "_R1_001.fastq.gz"),
         .before = cell_type)
```

# Transcript-Gene-Pair: `tx2gene_df`

Our goal is to sum up all counts of a gene (represented by gene ID) from all its transcripts (represented by transcript ID). First, we will import the mouse gene feature file (GTF) which will help us match the gene id and transcipt id.

```{r}
# Load this below
gtf <-  rtracklayer::import("data/Mus_musculus.GRCm38.102.gtf")

gtf_df <-  as.data.frame(gtf)

gtf_df
```

### Save `gtf_df`

```{r}
save(gtf_df, file = "data/mouse38_gtf_df.Rdata")
```

## Load the saved copy

```{r}
load(file = "data/mouse38_gtf_df.Rdata")
```

## Look up table

Create a look-up-table matching gene id to all its transcript ids:

```{r}
tx2gene_df <- gtf_df |>
  dplyr::select(transcript_id, gene_id) |>
	distinct(transcript_id, gene_id) |>
  drop_na() -> tx2gene_df

tx2gene_df

```

# Salmon loop

Predefine count table matrix by importing one of Salmon result to determine the number of genes for the table matrix.

```{r}
## Assesss how many genes in each sample?
tmp <-  read.delim(paste0("data/raw_data/salmon_output_files/", meta$folder_name[1], "/quant.sf")) |>
  ## The Ensembl ID (Name) column has an extra period (.) and a digit
  ## Remove them from each entries:
  mutate(Name = str_sub(Name, end=-3)) |>
  ## Add gene id onto the table matching against transcript id:
  inner_join(tx2gene_df, by=c("Name"="transcript_id")) |>
  ## Sum up all the counts for each gene id from all its transcript ids
  group_by(gene_id) |>
  summarise(NumReads=as.integer(sum(NumReads)))
```

Now we can pre-define an empty data matrix to the correct dimensions. Then we will perform a loop to read the quant files and fill in the data matrix on column at a time.

```{r}
sf.df <-  data.frame(matrix(0, nrow = length(tmp$gene_id), ncol = length(meta$folder_name)))
colnames(sf.df) <-  meta$folder_name
rownames(sf.df) <-  tmp$gene_id

for(i in seq_along(meta$folder_name)){
  cat("Now reading...", meta$folder_name[i])

  sf.df[,i] = read.delim(paste0("data/raw_data/salmon_output_files/", meta$folder_name[i], "/quant.sf")) |> 
    mutate(Name = str_sub(Name, end=-3)) |>
    inner_join(tx2gene_df, by=c("Name"="transcript_id")) |>
    group_by(gene_id) |>
    summarise(NumReads=as.integer(sum(NumReads))) |>
    pull(NumReads)
}
```

```{r}
sf.df
```

# Save dataset

Save a copy of the Salmon dataset so you don't have to start from scratch in future analyses:

```{r}
save(sf.df, file = "data/sf.df.Rdata")
```

```{r}
load(file = "data/sf.df.Rdata")
```

# Subset samples

If necessary, subset here:

```{r}
# meta_subset <- meta$sample_id |> 
#   filter()
```

# Filter count data

I'm saving this code but not running it for now. Our bulk data contains samples of multiple cell types : T, B, and NK cells. Filtering here may not be the right

```{r}
# sf.df.data <- sf.df %>%
#   ## Select or subset the desired samples 
#   #dplyr::select(subset.samples) %>%
#   ## Remove all NA (if any)
#   drop_na() %>% 
#   ## Filter low expressors
#   ### each value must be more than 10
#   mutate(Rowsum = apply(., 1, function(x) sum(x > 10))) %>% 
#   ### All values must be more than 10 (set to x if only x value is satisfied)
#   dplyr::filter(Rowsum == dim(meta)[1]) %>% 
#   ## No longer need the column "Rowsum", we can remove it
#   dplyr::select(-Rowsum)
# 
# sf.df.data
```

# DESeq Object

```{r}
class(sf.df.data)
```

## Create SummarizeExperiment Object

```{r}
sf.df.se <- SummarizedExperiment(assays = list(counts = as.matrix(sf.df.data)),
                                colData = meta)
```

## Create DESeq Object

```{r}
sf.df.dds = DESeqDataSet(sf.df.se, design = ~ group)
```
































